---
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
const now = Date.now();
let performances = await Astro.glob("/src/content/performances/*.md").then(
  (performances) => {
    const dayOfWeekDict: Record<number, string> = {
      0: "Sunday",
      1: "Monday",
      2: "Tuesday",
      3: "Wednesday",
      4: "Thursday",
      5: "Friday",
      6: "Saturday",
    };

    const monthDict: Record<number, string> = {
      0: "January",
      1: "February",
      2: "March",
      3: "April",
      4: "May",
      5: "June",
      6: "July",
      7: "August",
      8: "September",
      9: "October",
      10: "November",
      11: "December",
    };
    //Filter by making sure first that the content is in the future. Then sort the entries based on when they happen. Then map the array and build the object you'd like to use to generate your elements.
    return performances
      .filter((performance) => {
        let cmsDate: number = new Date(performance.frontmatter.date).getTime();
        return cmsDate > now;
      })
      .sort((a, b) => {
        const aDate = new Date(a.frontmatter.date).getTime();
        const bDate = new Date(b.frontmatter.date).getTime();
        return aDate - bDate;
      })
      .map((performance) => {
        const frontmatter = performance.frontmatter;
        const currentDate = new Date(frontmatter.date);
        const startTime = frontmatter.startTime;
        const endTime = frontmatter.endTime;
        const title = frontmatter.title;
        const link = frontmatter.link;
        const description = performance
          .compiledContent()
          .split("")
          .slice(3, -4)
          .join("");
        let day, dayOfWeek, month, year, formattedDate;

        day = currentDate.getDate();
        dayOfWeek = dayOfWeekDict[currentDate.getDay()];
        month = monthDict[currentDate.getMonth()];
        year = currentDate.getFullYear();
        formattedDate = `${dayOfWeek}, ${month} ${day}`;

        const newPerformanceObject = {
          title: title,
          date: formattedDate,
          startTime: startTime,
          endTime: endTime,
          link: link,
          description: description,
        };
        return newPerformanceObject;
      });
  }
);

const buttonClasses =
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90";
---

<Table>
  <TableCaption className="tracking-widest">UPCOMING LIVE SHOWS</TableCaption>
  <TableBody>
    {
      performances.length === 0 ? (
        <div class="px-8 py-20 w-full text-center">
          <span>
            Check back soon to see where Dylan will be performing next!
          </span>
        </div>
      ) : (
        performances.map(
          (performance: {
            title: string;
            date: string;
            description?: string;
            link?: string | URL;
          }) => {
            return (
              <TableRow className="justify-between border-none text-primary-foreground hover:text-black hover:cursor-pointer w-full flex items-center px-4">
                <TableCell className=" flex flex-col grow max-w-sm">
                  <h3 class="underline text-lg ">{performance.title}</h3>
                  <span>{performance.date}</span>
                  <p>{performance.description}</p>
                </TableCell>

                <TableCell className={buttonClasses}>
                  <a href={performance.link}>Buy Tickets</a>
                </TableCell>
              </TableRow>
            );
          }
        )
      )
    }
  </TableBody>
</Table>
